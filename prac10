. Create a Triangle class. Add exception handling statements to ensure the following
conditions: all sides are greater than 0 and sum of any two sides are greater than the
third side. The class should also have overloaded functions for calculating the area of
a right angled triangle as well as using Heron's formula to calculate the area of any type
of triangle

#include <iostream>
#include <cmath>
#include <stdexcept>

using namespace std;

class Triangle {
private:
    double side1, side2, side3;

public:
    Triangle(double s1, double s2, double s3) : side1(s1), side2(s2), side3(s3) {
        // Check if all sides are greater than 0
        if (s1 <= 0 || s2 <= 0 || s3 <= 0) {
            throw invalid_argument("All sides must be greater than 0.");
        }

        // Check if the sum of any two sides is greater than the third side
        if (s1 + s2 <= s3 || s1 + s3 <= s2 || s2 + s3 <= s1) {
            throw invalid_argument("Sum of any two sides must be greater than the third side.");
        }
    }

    double calculateArea() {
        // Using Heron's formula to calculate the area of any type of triangle
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    double calculateArea(double base, double height) {
        // Calculate the area of a right-angled triangle using base and height
        return 0.5 * base * height;
    }
};

int main() {
    try {
        // Create a triangle object
        Triangle triangle(3, 4, 5);

        // Calculate and display the area of the triangle using Heron's formula
        cout << "Area of the triangle (Heron's formula): " << triangle.calculateArea() << endl;

        // Calculate and display the area of the triangle using base and height
        cout << "Area of the triangle (Right-angled): " << triangle.calculateArea(3, 4) << endl;
    } catch (const invalid_argument& e) {
        // Handle invalid arguments
        cerr << "Invalid triangle: " << e.what() << endl;
    }

    return 0;
}
